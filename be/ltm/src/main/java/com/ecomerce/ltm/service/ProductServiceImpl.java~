package com.ecomerce.ltm.service;

import com.ecomerce.ltm.model.dto.ProductUpdateDTO;
import com.ecomerce.ltm.model.entity.ProductEntity;
import com.ecomerce.ltm.repository.ProductRepository;
import org.springframework.stereotype.Service;

import java.util.List;


@Service
public class ProductServiceImpl implements ProductService {
    private final ProductRepository productRepository;

    public ProductServiceImpl(ProductRepository productRepository) {
        this.productRepository = productRepository;
    }

    @Override
    public List<ProductEntity> getAllProducts() {
        return productRepository.findAll();
    }

    @Override
    public void updateProduct(Long id, ProductUpdateDTO productUpdateDTO) {
        ProductEntity product = productRepository.findById(id).orElse(null);
        if (product == null) {
            throw new RuntimeException("Không có sản phẩm nào với id: " + id);
        }
        boolean isUpdated = false;
        if(!product.getName().equals(productUpdateDTO.getName())) {
            product.setName(productUpdateDTO.getName());
            isUpdated = true;
        }
        if(!product.getDescription().equals(productUpdateDTO.getDescription())) {
            product.setDescription(productUpdateDTO.getDescription());
            isUpdated = true;
        }
        if(product.getPrice() != productUpdateDTO.getPrice()) {
            product.setPrice(productUpdateDTO.getPrice());
            isUpdated = true;
        }
        if(!product.getBrand().equals(productUpdateDTO.getBrand())) {
            product.setBrand(productUpdateDTO.getBrand());
            isUpdated = true;
        }
        if(!product.getCategory().equals(productUpdateDTO.getCategory())) {
            product.setCategory(productUpdateDTO.getCategory());
            isUpdated = true;
        }
        if(product.getPower() != productUpdateDTO.getPower()) {
            product.setPower(productUpdateDTO.getPower());
            isUpdated = true;
        }
        if(product.getRating() != productUpdateDTO.getRating()) {
            product.setRating(productUpdateDTO.getRating());
            isUpdated = true;
        }
        if(product.getStock() != productUpdateDTO.getStock()) {
            product.setStock(productUpdateDTO.getStock());
            isUpdated = true;
        }
        if(isUpdated) {
            productRepository.save(product);
        }

    }

    @Override
    public void deleteProduct(List<Long id>) {
        productRepository.deleteAllById(id);
    }

    @Override
    public ProductEntity getProductById(Long id) {
        return null;
    }


}
